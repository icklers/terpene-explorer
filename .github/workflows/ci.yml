name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual trigger
  workflow_dispatch:

env:
  # Enable build time tracking
  TIMING: '1'
  # Enable dependency cache debugging
  DEBUG: '1'

# Ensure we don't have multiple workflows running at once
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    name: 🔍 Validate
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: 'pnpm'

      # Cache dependencies
      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules
            ~/.pnpm-store
            ~/.cache/pnpm
          key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-

      # Cache build artifacts
      - name: 📦 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            .vite
            dist
            .swc
            coverage
          key: ${{ runner.os }}-build-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      # Cache TypeScript incremental builds
      - name: 📦 Cache TypeScript
        uses: actions/cache@v4
        with:
          path: |
            **/*.tsbuildinfo
            node_modules/.cache/typescript
            node_modules/.cache/tsbuildinfo
          key: ${{ runner.os }}-tsbuild-${{ hashFiles('**/tsconfig*.json') }}-${{ hashFiles('**/*.ts', '**/*.tsx') }}
          restore-keys: |
            ${{ runner.os }}-tsbuild-${{ hashFiles('**/tsconfig*.json') }}-
            ${{ runner.os }}-tsbuild-

      - name: 🔎 Type check
        run: pnpm run type-check

      - name: 🧪 Lint
        run: pnpm run lint

      - name: 💅 Check formatting
        run: pnpm run format:check

      # disabled, because of missing final test suite
      # - name: 🧬 Run unit tests
      #   run: pnpm run test:run

  # E2E tests disabled for now, because of missing test suite
  # e2e:
  #   name: 🎭 E2E Tests
  #   runs-on: ubuntu-latest
  #   needs: validate

  #   steps:
  #     - uses: actions/checkout@v5

  #     - name: 📥 Setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: 9

  #     - name: 🏗 Setup Node.js
  #       uses: actions/setup-node@v6
  #       with:
  #         node-version: 24
  #         cache: 'pnpm'

  #     - name: 📦 Install dependencies
  #       run: pnpm install --frozen-lockfile

  #     - name: 🎭 Install Playwright
  #       run: pnpm exec playwright install --with-deps

  #     - name: 🎭 Run Playwright tests
  #       run: pnpm run test:e2e

  #     - name: 📊 Upload test results
  #       if: always()
  #       uses: actions/upload-artifact@v5
  #       with:
  #         name: playwright-report
  #         path: playwright-report/
  #         retention-days: 30

  build:
    name: 🏗 Build
    runs-on: ubuntu-latest
    needs: [validate]

    steps:
      - uses: actions/checkout@v5

      - name: 📥 Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.19.0

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: 'pnpm'

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: 🔧 Create production env
        run: |
          echo "VITE_BUILD_TIME=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> .env.production
          echo "VITE_COMMIT_SHA=$GITHUB_SHA" >> .env.production
          echo "VITE_VERSION=${GITHUB_REF#refs/*/}" >> .env.production

      - name: Validate and copy data files
        run: pnpm run copy-and-validate-data

      - name: 🏗 Build for Azure SWA
        id: build-swa
        run: |
          start_time=$SECONDS
          NODE_ENV=production MODE=azure-swa pnpm run build
          # Copy SWA config into the build
          cp staticwebapp.config.json dist/
          end_time=$SECONDS
          build_time=$((end_time - start_time))
          echo "swa_build_time=$build_time" >> $GITHUB_OUTPUT
          build_size=$(du -sh dist | cut -f1)
          echo "swa_build_size=$build_size" >> $GITHUB_OUTPUT
          chunk_count=$(find dist/assets -type f | wc -l)
          echo "swa_chunk_count=$chunk_count" >> $GITHUB_OUTPUT

      - name: 📝 Create 404.html
        run: cp dist/index.html dist/404.html

      - name: 📊 Report Build Stats
        run: |
          echo "### Build Performance Report 📊" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Azure SWA |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Time | ${{ steps.build-swa.outputs.swa_build_time }}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Size | ${{ steps.build-swa.outputs.swa_build_size }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Chunk Count | ${{ steps.build-swa.outputs.swa_chunk_count }} |" >> $GITHUB_STEP_SUMMARY

      - name: 📦 Upload Azure SWA build
        uses: actions/upload-artifact@v5
        with:
          name: azure-swa-build
          path: dist/
          retention-days: 7

      - name: 📦 Archive build artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          cd dist
          tar -czf ../dist.tar.gz .
          cd ..
          zip -r dist.zip dist/

      - name: 📤 Upload archived artifacts
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v5
        with:
          name: release-artifacts
          path: |
            dist.tar.gz
            dist.zip
          retention-days: 7

  deploy_preview:
    name: 🚀 Deploy Preview
    needs: [build]
    # Only deploy for PRs, not for main branch (that uses workflow_run)
    if: github.event_name == 'pull_request'
    permissions:
      contents: read
      pull-requests: write
    uses: ./.github/workflows/azure-static-web-apps-blue-desert-06e30df03.yml
    with:
      environment: preview
    secrets:
      AZURE_STATIC_WEB_APPS_API_TOKEN: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_BLUE_DESERT_06E30DF03 }}
